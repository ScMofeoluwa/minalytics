// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/ScMofeoluwa/minalytics/database/sqlc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CheckAppExists provides a mock function with given fields: ctx, arg
func (_m *Querier) CheckAppExists(ctx context.Context, arg database.CheckAppExistsParams) (database.App, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CheckAppExists")
	}

	var r0 database.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CheckAppExistsParams) (database.App, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CheckAppExistsParams) database.App); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.App)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CheckAppExistsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CheckAppExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAppExists'
type Querier_CheckAppExists_Call struct {
	*mock.Call
}

// CheckAppExists is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CheckAppExistsParams
func (_e *Querier_Expecter) CheckAppExists(ctx interface{}, arg interface{}) *Querier_CheckAppExists_Call {
	return &Querier_CheckAppExists_Call{Call: _e.mock.On("CheckAppExists", ctx, arg)}
}

func (_c *Querier_CheckAppExists_Call) Run(run func(ctx context.Context, arg database.CheckAppExistsParams)) *Querier_CheckAppExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CheckAppExistsParams))
	})
	return _c
}

func (_c *Querier_CheckAppExists_Call) Return(_a0 database.App, _a1 error) *Querier_CheckAppExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CheckAppExists_Call) RunAndReturn(run func(context.Context, database.CheckAppExistsParams) (database.App, error)) *Querier_CheckAppExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateApp provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateApp(ctx context.Context, arg database.CreateAppParams) (database.App, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 database.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateAppParams) (database.App, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateAppParams) database.App); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.App)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateAppParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type Querier_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateAppParams
func (_e *Querier_Expecter) CreateApp(ctx interface{}, arg interface{}) *Querier_CreateApp_Call {
	return &Querier_CreateApp_Call{Call: _e.mock.On("CreateApp", ctx, arg)}
}

func (_c *Querier_CreateApp_Call) Run(run func(ctx context.Context, arg database.CreateAppParams)) *Querier_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateAppParams))
	})
	return _c
}

func (_c *Querier_CreateApp_Call) Return(_a0 database.App, _a1 error) *Querier_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateApp_Call) RunAndReturn(run func(context.Context, database.CreateAppParams) (database.App, error)) *Querier_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateEvent(ctx context.Context, arg database.CreateEventParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateEventParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type Querier_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateEventParams
func (_e *Querier_Expecter) CreateEvent(ctx interface{}, arg interface{}) *Querier_CreateEvent_Call {
	return &Querier_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, arg)}
}

func (_c *Querier_CreateEvent_Call) Run(run func(ctx context.Context, arg database.CreateEventParams)) *Querier_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateEventParams))
	})
	return _c
}

func (_c *Querier_CreateEvent_Call) Return(_a0 error) *Querier_CreateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateEvent_Call) RunAndReturn(run func(context.Context, database.CreateEventParams) error) *Querier_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppByTrackingID provides a mock function with given fields: ctx, trackingID
func (_m *Querier) GetAppByTrackingID(ctx context.Context, trackingID uuid.UUID) (database.App, error) {
	ret := _m.Called(ctx, trackingID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppByTrackingID")
	}

	var r0 database.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.App, error)); ok {
		return rf(ctx, trackingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.App); ok {
		r0 = rf(ctx, trackingID)
	} else {
		r0 = ret.Get(0).(database.App)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, trackingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAppByTrackingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppByTrackingID'
type Querier_GetAppByTrackingID_Call struct {
	*mock.Call
}

// GetAppByTrackingID is a helper method to define mock.On call
//   - ctx context.Context
//   - trackingID uuid.UUID
func (_e *Querier_Expecter) GetAppByTrackingID(ctx interface{}, trackingID interface{}) *Querier_GetAppByTrackingID_Call {
	return &Querier_GetAppByTrackingID_Call{Call: _e.mock.On("GetAppByTrackingID", ctx, trackingID)}
}

func (_c *Querier_GetAppByTrackingID_Call) Run(run func(ctx context.Context, trackingID uuid.UUID)) *Querier_GetAppByTrackingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetAppByTrackingID_Call) Return(_a0 database.App, _a1 error) *Querier_GetAppByTrackingID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAppByTrackingID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (database.App, error)) *Querier_GetAppByTrackingID_Call {
	_c.Call.Return(run)
	return _c
}

// GetApps provides a mock function with given fields: ctx, userID
func (_m *Querier) GetApps(ctx context.Context, userID uuid.UUID) ([]database.App, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 []database.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]database.App, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []database.App); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApps'
type Querier_GetApps_Call struct {
	*mock.Call
}

// GetApps is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) GetApps(ctx interface{}, userID interface{}) *Querier_GetApps_Call {
	return &Querier_GetApps_Call{Call: _e.mock.On("GetApps", ctx, userID)}
}

func (_c *Querier_GetApps_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_GetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetApps_Call) Return(_a0 []database.App, _a1 error) *Querier_GetApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetApps_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]database.App, error)) *Querier_GetApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrowsers provides a mock function with given fields: ctx, arg
func (_m *Querier) GetBrowsers(ctx context.Context, arg database.GetBrowsersParams) ([]database.GetBrowsersRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetBrowsers")
	}

	var r0 []database.GetBrowsersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetBrowsersParams) ([]database.GetBrowsersRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetBrowsersParams) []database.GetBrowsersRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetBrowsersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetBrowsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBrowsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrowsers'
type Querier_GetBrowsers_Call struct {
	*mock.Call
}

// GetBrowsers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetBrowsersParams
func (_e *Querier_Expecter) GetBrowsers(ctx interface{}, arg interface{}) *Querier_GetBrowsers_Call {
	return &Querier_GetBrowsers_Call{Call: _e.mock.On("GetBrowsers", ctx, arg)}
}

func (_c *Querier_GetBrowsers_Call) Run(run func(ctx context.Context, arg database.GetBrowsersParams)) *Querier_GetBrowsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetBrowsersParams))
	})
	return _c
}

func (_c *Querier_GetBrowsers_Call) Return(_a0 []database.GetBrowsersRow, _a1 error) *Querier_GetBrowsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBrowsers_Call) RunAndReturn(run func(context.Context, database.GetBrowsersParams) ([]database.GetBrowsersRow, error)) *Querier_GetBrowsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountries provides a mock function with given fields: ctx, arg
func (_m *Querier) GetCountries(ctx context.Context, arg database.GetCountriesParams) ([]database.GetCountriesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetCountries")
	}

	var r0 []database.GetCountriesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetCountriesParams) ([]database.GetCountriesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetCountriesParams) []database.GetCountriesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetCountriesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetCountriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCountries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountries'
type Querier_GetCountries_Call struct {
	*mock.Call
}

// GetCountries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetCountriesParams
func (_e *Querier_Expecter) GetCountries(ctx interface{}, arg interface{}) *Querier_GetCountries_Call {
	return &Querier_GetCountries_Call{Call: _e.mock.On("GetCountries", ctx, arg)}
}

func (_c *Querier_GetCountries_Call) Run(run func(ctx context.Context, arg database.GetCountriesParams)) *Querier_GetCountries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetCountriesParams))
	})
	return _c
}

func (_c *Querier_GetCountries_Call) Return(_a0 []database.GetCountriesRow, _a1 error) *Querier_GetCountries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCountries_Call) RunAndReturn(run func(context.Context, database.GetCountriesParams) ([]database.GetCountriesRow, error)) *Querier_GetCountries_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevices provides a mock function with given fields: ctx, arg
func (_m *Querier) GetDevices(ctx context.Context, arg database.GetDevicesParams) ([]database.GetDevicesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []database.GetDevicesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDevicesParams) ([]database.GetDevicesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDevicesParams) []database.GetDevicesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetDevicesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDevicesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevices'
type Querier_GetDevices_Call struct {
	*mock.Call
}

// GetDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetDevicesParams
func (_e *Querier_Expecter) GetDevices(ctx interface{}, arg interface{}) *Querier_GetDevices_Call {
	return &Querier_GetDevices_Call{Call: _e.mock.On("GetDevices", ctx, arg)}
}

func (_c *Querier_GetDevices_Call) Run(run func(ctx context.Context, arg database.GetDevicesParams)) *Querier_GetDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDevicesParams))
	})
	return _c
}

func (_c *Querier_GetDevices_Call) Return(_a0 []database.GetDevicesRow, _a1 error) *Querier_GetDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetDevices_Call) RunAndReturn(run func(context.Context, database.GetDevicesParams) ([]database.GetDevicesRow, error)) *Querier_GetDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetOS provides a mock function with given fields: ctx, arg
func (_m *Querier) GetOS(ctx context.Context, arg database.GetOSParams) ([]database.GetOSRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetOS")
	}

	var r0 []database.GetOSRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetOSParams) ([]database.GetOSRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetOSParams) []database.GetOSRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetOSRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetOSParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetOS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOS'
type Querier_GetOS_Call struct {
	*mock.Call
}

// GetOS is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetOSParams
func (_e *Querier_Expecter) GetOS(ctx interface{}, arg interface{}) *Querier_GetOS_Call {
	return &Querier_GetOS_Call{Call: _e.mock.On("GetOS", ctx, arg)}
}

func (_c *Querier_GetOS_Call) Run(run func(ctx context.Context, arg database.GetOSParams)) *Querier_GetOS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetOSParams))
	})
	return _c
}

func (_c *Querier_GetOS_Call) Return(_a0 []database.GetOSRow, _a1 error) *Querier_GetOS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetOS_Call) RunAndReturn(run func(context.Context, database.GetOSParams) ([]database.GetOSRow, error)) *Querier_GetOS_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateUser provides a mock function with given fields: ctx, email
func (_m *Querier) GetOrCreateUser(ctx context.Context, email string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetOrCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateUser'
type Querier_GetOrCreateUser_Call struct {
	*mock.Call
}

// GetOrCreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Querier_Expecter) GetOrCreateUser(ctx interface{}, email interface{}) *Querier_GetOrCreateUser_Call {
	return &Querier_GetOrCreateUser_Call{Call: _e.mock.On("GetOrCreateUser", ctx, email)}
}

func (_c *Querier_GetOrCreateUser_Call) Run(run func(ctx context.Context, email string)) *Querier_GetOrCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetOrCreateUser_Call) Return(_a0 uuid.UUID, _a1 error) *Querier_GetOrCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetOrCreateUser_Call) RunAndReturn(run func(context.Context, string) (uuid.UUID, error)) *Querier_GetOrCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageViews provides a mock function with given fields: ctx, arg
func (_m *Querier) GetPageViews(ctx context.Context, arg database.GetPageViewsParams) ([]database.GetPageViewsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetPageViews")
	}

	var r0 []database.GetPageViewsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetPageViewsParams) ([]database.GetPageViewsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetPageViewsParams) []database.GetPageViewsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetPageViewsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetPageViewsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPageViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageViews'
type Querier_GetPageViews_Call struct {
	*mock.Call
}

// GetPageViews is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetPageViewsParams
func (_e *Querier_Expecter) GetPageViews(ctx interface{}, arg interface{}) *Querier_GetPageViews_Call {
	return &Querier_GetPageViews_Call{Call: _e.mock.On("GetPageViews", ctx, arg)}
}

func (_c *Querier_GetPageViews_Call) Run(run func(ctx context.Context, arg database.GetPageViewsParams)) *Querier_GetPageViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetPageViewsParams))
	})
	return _c
}

func (_c *Querier_GetPageViews_Call) Return(_a0 []database.GetPageViewsRow, _a1 error) *Querier_GetPageViews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPageViews_Call) RunAndReturn(run func(context.Context, database.GetPageViewsParams) ([]database.GetPageViewsRow, error)) *Querier_GetPageViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetPages provides a mock function with given fields: ctx, arg
func (_m *Querier) GetPages(ctx context.Context, arg database.GetPagesParams) ([]database.GetPagesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetPages")
	}

	var r0 []database.GetPagesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetPagesParams) ([]database.GetPagesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetPagesParams) []database.GetPagesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetPagesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetPagesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPages'
type Querier_GetPages_Call struct {
	*mock.Call
}

// GetPages is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetPagesParams
func (_e *Querier_Expecter) GetPages(ctx interface{}, arg interface{}) *Querier_GetPages_Call {
	return &Querier_GetPages_Call{Call: _e.mock.On("GetPages", ctx, arg)}
}

func (_c *Querier_GetPages_Call) Run(run func(ctx context.Context, arg database.GetPagesParams)) *Querier_GetPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetPagesParams))
	})
	return _c
}

func (_c *Querier_GetPages_Call) Return(_a0 []database.GetPagesRow, _a1 error) *Querier_GetPages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPages_Call) RunAndReturn(run func(context.Context, database.GetPagesParams) ([]database.GetPagesRow, error)) *Querier_GetPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferrals provides a mock function with given fields: ctx, arg
func (_m *Querier) GetReferrals(ctx context.Context, arg database.GetReferralsParams) ([]database.GetReferralsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetReferrals")
	}

	var r0 []database.GetReferralsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetReferralsParams) ([]database.GetReferralsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetReferralsParams) []database.GetReferralsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetReferralsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetReferralsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferrals'
type Querier_GetReferrals_Call struct {
	*mock.Call
}

// GetReferrals is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetReferralsParams
func (_e *Querier_Expecter) GetReferrals(ctx interface{}, arg interface{}) *Querier_GetReferrals_Call {
	return &Querier_GetReferrals_Call{Call: _e.mock.On("GetReferrals", ctx, arg)}
}

func (_c *Querier_GetReferrals_Call) Run(run func(ctx context.Context, arg database.GetReferralsParams)) *Querier_GetReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetReferralsParams))
	})
	return _c
}

func (_c *Querier_GetReferrals_Call) Return(_a0 []database.GetReferralsRow, _a1 error) *Querier_GetReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetReferrals_Call) RunAndReturn(run func(context.Context, database.GetReferralsParams) ([]database.GetReferralsRow, error)) *Querier_GetReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetVisitors provides a mock function with given fields: ctx, arg
func (_m *Querier) GetVisitors(ctx context.Context, arg database.GetVisitorsParams) ([]database.GetVisitorsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVisitors")
	}

	var r0 []database.GetVisitorsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetVisitorsParams) ([]database.GetVisitorsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetVisitorsParams) []database.GetVisitorsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetVisitorsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetVisitorsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetVisitors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVisitors'
type Querier_GetVisitors_Call struct {
	*mock.Call
}

// GetVisitors is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetVisitorsParams
func (_e *Querier_Expecter) GetVisitors(ctx interface{}, arg interface{}) *Querier_GetVisitors_Call {
	return &Querier_GetVisitors_Call{Call: _e.mock.On("GetVisitors", ctx, arg)}
}

func (_c *Querier_GetVisitors_Call) Run(run func(ctx context.Context, arg database.GetVisitorsParams)) *Querier_GetVisitors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetVisitorsParams))
	})
	return _c
}

func (_c *Querier_GetVisitors_Call) Return(_a0 []database.GetVisitorsRow, _a1 error) *Querier_GetVisitors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetVisitors_Call) RunAndReturn(run func(context.Context, database.GetVisitorsParams) ([]database.GetVisitorsRow, error)) *Querier_GetVisitors_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
