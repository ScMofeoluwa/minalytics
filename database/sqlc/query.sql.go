// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
  visitor_id, tracking_id, event_type, url, referrer, country, browser, operating_system, details, timestamp
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, CURREMT_TIMESTAMP )
`

type CreateEventParams struct {
	VisitorID       string      `json:"visitor_id"`
	TrackingID      pgtype.UUID `json:"tracking_id"`
	EventType       string      `json:"event_type"`
	Url             pgtype.Text `json:"url"`
	Referrer        pgtype.Text `json:"referrer"`
	Country         string      `json:"country"`
	Browser         string      `json:"browser"`
	OperatingSystem string      `json:"operating_system"`
	Details         []byte      `json:"details"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.VisitorID,
		arg.TrackingID,
		arg.EventType,
		arg.Url,
		arg.Referrer,
		arg.Country,
		arg.Browser,
		arg.OperatingSystem,
		arg.Details,
	)
	return err
}

const findOrCreateUser = `-- name: FindOrCreateUser :one
INSERT INTO users (
  email
) VALUES ( $1 )
ON CONFLICT ( email ) DO UPDATE
SET email = EXCLUDED.email
RETURNING id
`

func (q *Queries) FindOrCreateUser(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, findOrCreateUser, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
