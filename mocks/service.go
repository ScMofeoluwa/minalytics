// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	server "github.com/ScMofeoluwa/minalytics/shared"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AnalyticsService is an autogenerated mock type for the AnalyticsService type
type AnalyticsService struct {
	mock.Mock
}

type AnalyticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *AnalyticsService) EXPECT() *AnalyticsService_Expecter {
	return &AnalyticsService_Expecter{mock: &_m.Mock}
}

// CreateApp provides a mock function with given fields: _a0, _a1, _a2
func (_m *AnalyticsService) CreateApp(_a0 context.Context, _a1 uuid.UUID, _a2 string) (*server.App, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *server.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*server.App, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *server.App); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type AnalyticsService_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 string
func (_e *AnalyticsService_Expecter) CreateApp(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AnalyticsService_CreateApp_Call {
	return &AnalyticsService_CreateApp_Call{Call: _e.mock.On("CreateApp", _a0, _a1, _a2)}
}

func (_c *AnalyticsService_CreateApp_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 string)) *AnalyticsService_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AnalyticsService_CreateApp_Call) Return(_a0 *server.App, _a1 error) *AnalyticsService_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_CreateApp_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*server.App, error)) *AnalyticsService_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApp provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) DeleteApp(_a0 context.Context, _a1 server.AppPayload) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, server.AppPayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnalyticsService_DeleteApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApp'
type AnalyticsService_DeleteApp_Call struct {
	*mock.Call
}

// DeleteApp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.AppPayload
func (_e *AnalyticsService_Expecter) DeleteApp(_a0 interface{}, _a1 interface{}) *AnalyticsService_DeleteApp_Call {
	return &AnalyticsService_DeleteApp_Call{Call: _e.mock.On("DeleteApp", _a0, _a1)}
}

func (_c *AnalyticsService_DeleteApp_Call) Run(run func(_a0 context.Context, _a1 server.AppPayload)) *AnalyticsService_DeleteApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.AppPayload))
	})
	return _c
}

func (_c *AnalyticsService_DeleteApp_Call) Return(_a0 error) *AnalyticsService_DeleteApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AnalyticsService_DeleteApp_Call) RunAndReturn(run func(context.Context, server.AppPayload) error) *AnalyticsService_DeleteApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetApps provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetApps(_a0 context.Context, _a1 uuid.UUID) ([]server.App, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 []server.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]server.App, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []server.App); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApps'
type AnalyticsService_GetApps_Call struct {
	*mock.Call
}

// GetApps is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *AnalyticsService_Expecter) GetApps(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetApps_Call {
	return &AnalyticsService_GetApps_Call{Call: _e.mock.On("GetApps", _a0, _a1)}
}

func (_c *AnalyticsService_GetApps_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *AnalyticsService_GetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AnalyticsService_GetApps_Call) Return(_a0 []server.App, _a1 error) *AnalyticsService_GetApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetApps_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]server.App, error)) *AnalyticsService_GetApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrowsers provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetBrowsers(_a0 context.Context, _a1 server.RequestPayload) ([]server.BrowserStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBrowsers")
	}

	var r0 []server.BrowserStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.BrowserStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.BrowserStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.BrowserStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetBrowsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrowsers'
type AnalyticsService_GetBrowsers_Call struct {
	*mock.Call
}

// GetBrowsers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetBrowsers(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetBrowsers_Call {
	return &AnalyticsService_GetBrowsers_Call{Call: _e.mock.On("GetBrowsers", _a0, _a1)}
}

func (_c *AnalyticsService_GetBrowsers_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetBrowsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetBrowsers_Call) Return(_a0 []server.BrowserStats, _a1 error) *AnalyticsService_GetBrowsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetBrowsers_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.BrowserStats, error)) *AnalyticsService_GetBrowsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountries provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetCountries(_a0 context.Context, _a1 server.RequestPayload) ([]server.CountryStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCountries")
	}

	var r0 []server.CountryStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.CountryStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.CountryStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.CountryStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetCountries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountries'
type AnalyticsService_GetCountries_Call struct {
	*mock.Call
}

// GetCountries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetCountries(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetCountries_Call {
	return &AnalyticsService_GetCountries_Call{Call: _e.mock.On("GetCountries", _a0, _a1)}
}

func (_c *AnalyticsService_GetCountries_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetCountries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetCountries_Call) Return(_a0 []server.CountryStats, _a1 error) *AnalyticsService_GetCountries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetCountries_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.CountryStats, error)) *AnalyticsService_GetCountries_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevices provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetDevices(_a0 context.Context, _a1 server.RequestPayload) ([]server.DeviceStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []server.DeviceStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.DeviceStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.DeviceStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.DeviceStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevices'
type AnalyticsService_GetDevices_Call struct {
	*mock.Call
}

// GetDevices is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetDevices(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetDevices_Call {
	return &AnalyticsService_GetDevices_Call{Call: _e.mock.On("GetDevices", _a0, _a1)}
}

func (_c *AnalyticsService_GetDevices_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetDevices_Call) Return(_a0 []server.DeviceStats, _a1 error) *AnalyticsService_GetDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetDevices_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.DeviceStats, error)) *AnalyticsService_GetDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetOS provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetOS(_a0 context.Context, _a1 server.RequestPayload) ([]server.OSStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOS")
	}

	var r0 []server.OSStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.OSStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.OSStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.OSStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetOS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOS'
type AnalyticsService_GetOS_Call struct {
	*mock.Call
}

// GetOS is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetOS(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetOS_Call {
	return &AnalyticsService_GetOS_Call{Call: _e.mock.On("GetOS", _a0, _a1)}
}

func (_c *AnalyticsService_GetOS_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetOS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetOS_Call) Return(_a0 []server.OSStats, _a1 error) *AnalyticsService_GetOS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetOS_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.OSStats, error)) *AnalyticsService_GetOS_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageViews provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetPageViews(_a0 context.Context, _a1 server.RequestPayload) ([]server.PageViewStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPageViews")
	}

	var r0 []server.PageViewStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.PageViewStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.PageViewStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.PageViewStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetPageViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageViews'
type AnalyticsService_GetPageViews_Call struct {
	*mock.Call
}

// GetPageViews is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetPageViews(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetPageViews_Call {
	return &AnalyticsService_GetPageViews_Call{Call: _e.mock.On("GetPageViews", _a0, _a1)}
}

func (_c *AnalyticsService_GetPageViews_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetPageViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetPageViews_Call) Return(_a0 []server.PageViewStats, _a1 error) *AnalyticsService_GetPageViews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetPageViews_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.PageViewStats, error)) *AnalyticsService_GetPageViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetPages provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetPages(_a0 context.Context, _a1 server.RequestPayload) ([]server.PageStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPages")
	}

	var r0 []server.PageStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.PageStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.PageStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.PageStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPages'
type AnalyticsService_GetPages_Call struct {
	*mock.Call
}

// GetPages is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetPages(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetPages_Call {
	return &AnalyticsService_GetPages_Call{Call: _e.mock.On("GetPages", _a0, _a1)}
}

func (_c *AnalyticsService_GetPages_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetPages_Call) Return(_a0 []server.PageStats, _a1 error) *AnalyticsService_GetPages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetPages_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.PageStats, error)) *AnalyticsService_GetPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferrals provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetReferrals(_a0 context.Context, _a1 server.RequestPayload) ([]server.ReferralStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetReferrals")
	}

	var r0 []server.ReferralStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.ReferralStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.ReferralStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.ReferralStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferrals'
type AnalyticsService_GetReferrals_Call struct {
	*mock.Call
}

// GetReferrals is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetReferrals(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetReferrals_Call {
	return &AnalyticsService_GetReferrals_Call{Call: _e.mock.On("GetReferrals", _a0, _a1)}
}

func (_c *AnalyticsService_GetReferrals_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetReferrals_Call) Return(_a0 []server.ReferralStats, _a1 error) *AnalyticsService_GetReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetReferrals_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.ReferralStats, error)) *AnalyticsService_GetReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetVisitors provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) GetVisitors(_a0 context.Context, _a1 server.RequestPayload) ([]server.VisitorStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVisitors")
	}

	var r0 []server.VisitorStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) ([]server.VisitorStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.RequestPayload) []server.VisitorStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.VisitorStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.RequestPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_GetVisitors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVisitors'
type AnalyticsService_GetVisitors_Call struct {
	*mock.Call
}

// GetVisitors is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.RequestPayload
func (_e *AnalyticsService_Expecter) GetVisitors(_a0 interface{}, _a1 interface{}) *AnalyticsService_GetVisitors_Call {
	return &AnalyticsService_GetVisitors_Call{Call: _e.mock.On("GetVisitors", _a0, _a1)}
}

func (_c *AnalyticsService_GetVisitors_Call) Run(run func(_a0 context.Context, _a1 server.RequestPayload)) *AnalyticsService_GetVisitors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.RequestPayload))
	})
	return _c
}

func (_c *AnalyticsService_GetVisitors_Call) Return(_a0 []server.VisitorStats, _a1 error) *AnalyticsService_GetVisitors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_GetVisitors_Call) RunAndReturn(run func(context.Context, server.RequestPayload) ([]server.VisitorStats, error)) *AnalyticsService_GetVisitors_Call {
	_c.Call.Return(run)
	return _c
}

// ParseUserAgent provides a mock function with given fields: _a0
func (_m *AnalyticsService) ParseUserAgent(_a0 string) *server.UserAgentDetails {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParseUserAgent")
	}

	var r0 *server.UserAgentDetails
	if rf, ok := ret.Get(0).(func(string) *server.UserAgentDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.UserAgentDetails)
		}
	}

	return r0
}

// AnalyticsService_ParseUserAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseUserAgent'
type AnalyticsService_ParseUserAgent_Call struct {
	*mock.Call
}

// ParseUserAgent is a helper method to define mock.On call
//   - _a0 string
func (_e *AnalyticsService_Expecter) ParseUserAgent(_a0 interface{}) *AnalyticsService_ParseUserAgent_Call {
	return &AnalyticsService_ParseUserAgent_Call{Call: _e.mock.On("ParseUserAgent", _a0)}
}

func (_c *AnalyticsService_ParseUserAgent_Call) Run(run func(_a0 string)) *AnalyticsService_ParseUserAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AnalyticsService_ParseUserAgent_Call) Return(_a0 *server.UserAgentDetails) *AnalyticsService_ParseUserAgent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AnalyticsService_ParseUserAgent_Call) RunAndReturn(run func(string) *server.UserAgentDetails) *AnalyticsService_ParseUserAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveGeoLocation provides a mock function with given fields: _a0
func (_m *AnalyticsService) ResolveGeoLocation(_a0 string) (*server.GeoLocation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ResolveGeoLocation")
	}

	var r0 *server.GeoLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*server.GeoLocation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *server.GeoLocation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.GeoLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_ResolveGeoLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveGeoLocation'
type AnalyticsService_ResolveGeoLocation_Call struct {
	*mock.Call
}

// ResolveGeoLocation is a helper method to define mock.On call
//   - _a0 string
func (_e *AnalyticsService_Expecter) ResolveGeoLocation(_a0 interface{}) *AnalyticsService_ResolveGeoLocation_Call {
	return &AnalyticsService_ResolveGeoLocation_Call{Call: _e.mock.On("ResolveGeoLocation", _a0)}
}

func (_c *AnalyticsService_ResolveGeoLocation_Call) Run(run func(_a0 string)) *AnalyticsService_ResolveGeoLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AnalyticsService_ResolveGeoLocation_Call) Return(_a0 *server.GeoLocation, _a1 error) *AnalyticsService_ResolveGeoLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_ResolveGeoLocation_Call) RunAndReturn(run func(string) (*server.GeoLocation, error)) *AnalyticsService_ResolveGeoLocation_Call {
	_c.Call.Return(run)
	return _c
}

// SignIn provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) SignIn(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type AnalyticsService_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AnalyticsService_Expecter) SignIn(_a0 interface{}, _a1 interface{}) *AnalyticsService_SignIn_Call {
	return &AnalyticsService_SignIn_Call{Call: _e.mock.On("SignIn", _a0, _a1)}
}

func (_c *AnalyticsService_SignIn_Call) Run(run func(_a0 context.Context, _a1 string)) *AnalyticsService_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AnalyticsService_SignIn_Call) Return(_a0 string, _a1 error) *AnalyticsService_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_SignIn_Call) RunAndReturn(run func(context.Context, string) (string, error)) *AnalyticsService_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// TrackEvent provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) TrackEvent(_a0 context.Context, _a1 server.EventPayload) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TrackEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, server.EventPayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnalyticsService_TrackEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackEvent'
type AnalyticsService_TrackEvent_Call struct {
	*mock.Call
}

// TrackEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.EventPayload
func (_e *AnalyticsService_Expecter) TrackEvent(_a0 interface{}, _a1 interface{}) *AnalyticsService_TrackEvent_Call {
	return &AnalyticsService_TrackEvent_Call{Call: _e.mock.On("TrackEvent", _a0, _a1)}
}

func (_c *AnalyticsService_TrackEvent_Call) Run(run func(_a0 context.Context, _a1 server.EventPayload)) *AnalyticsService_TrackEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.EventPayload))
	})
	return _c
}

func (_c *AnalyticsService_TrackEvent_Call) Return(_a0 error) *AnalyticsService_TrackEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AnalyticsService_TrackEvent_Call) RunAndReturn(run func(context.Context, server.EventPayload) error) *AnalyticsService_TrackEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApp provides a mock function with given fields: _a0, _a1
func (_m *AnalyticsService) UpdateApp(_a0 context.Context, _a1 server.AppPayload) (*server.App, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *server.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.AppPayload) (*server.App, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.AppPayload) *server.App); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.AppPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyticsService_UpdateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApp'
type AnalyticsService_UpdateApp_Call struct {
	*mock.Call
}

// UpdateApp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.AppPayload
func (_e *AnalyticsService_Expecter) UpdateApp(_a0 interface{}, _a1 interface{}) *AnalyticsService_UpdateApp_Call {
	return &AnalyticsService_UpdateApp_Call{Call: _e.mock.On("UpdateApp", _a0, _a1)}
}

func (_c *AnalyticsService_UpdateApp_Call) Run(run func(_a0 context.Context, _a1 server.AppPayload)) *AnalyticsService_UpdateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.AppPayload))
	})
	return _c
}

func (_c *AnalyticsService_UpdateApp_Call) Return(_a0 *server.App, _a1 error) *AnalyticsService_UpdateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyticsService_UpdateApp_Call) RunAndReturn(run func(context.Context, server.AppPayload) (*server.App, error)) *AnalyticsService_UpdateApp_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAppAccess provides a mock function with given fields: _a0, _a1, _a2
func (_m *AnalyticsService) ValidateAppAccess(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAppAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnalyticsService_ValidateAppAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAppAccess'
type AnalyticsService_ValidateAppAccess_Call struct {
	*mock.Call
}

// ValidateAppAccess is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 uuid.UUID
func (_e *AnalyticsService_Expecter) ValidateAppAccess(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AnalyticsService_ValidateAppAccess_Call {
	return &AnalyticsService_ValidateAppAccess_Call{Call: _e.mock.On("ValidateAppAccess", _a0, _a1, _a2)}
}

func (_c *AnalyticsService_ValidateAppAccess_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID)) *AnalyticsService_ValidateAppAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *AnalyticsService_ValidateAppAccess_Call) Return(_a0 error) *AnalyticsService_ValidateAppAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AnalyticsService_ValidateAppAccess_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *AnalyticsService_ValidateAppAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewAnalyticsService creates a new instance of AnalyticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyticsService {
	mock := &AnalyticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
